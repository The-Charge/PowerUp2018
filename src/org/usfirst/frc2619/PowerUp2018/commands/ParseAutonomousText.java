// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PowerUp2018.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc2619.PowerUp2018.commands.DriveToCurrent;
import org.usfirst.frc2619.PowerUp2018.commands.DriveXFeetMotionMagic;
import org.usfirst.frc2619.PowerUp2018.commands.ShiftLow;
import org.usfirst.frc2619.PowerUp2018.commands.TurnNDegreesAbsolutePID;
import org.usfirst.frc2619.PowerUp2018.subsystems.*;

/**
 *
 */
public class ParseAutonomousText extends CommandGroup {
	private String computedAuton = "";

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public ParseAutonomousText(String rawAuton) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    	
    	String fourPaths[] = rawAuton.split("\\|");
    	String switchColors = DriverStation.getInstance().getGameSpecificMessage().substring(0, 2);
    	
    	System.out.println(switchColors);
    	
    	for(String a : fourPaths) {
    		System.out.println(a);
    		if (a.startsWith(switchColors)) {
    			computedAuton = a.substring(3);
    		}
    	}
    	addSequential(new ShiftLow());
    	System.out.println("ComputedAuton\n" + computedAuton);
    	
    	String sequencedTasks[] = computedAuton.split("\\,");
    	for(String task : sequencedTasks ) {
    		System.out.println(task);
    		if(task.contains("el")) {
    			//addParallel(new ElevateToXPos(task.substring(0,task.substring(task.indexOf("el")));
	    		System.out.println("Elevating");
    		}
    		else if(task.contains("ft")) {
    		addSequential(new DriveXFeetMotionMagic(Double.parseDouble(task.substring(0, task.indexOf("ft")))));
    		System.out.println("DrivingXFeet");
    		}
    		else if (task.contains("dg")) {
    			addSequential(new TurnNDegreesAbsolutePID(Double.parseDouble(computedAuton.substring(0, task.indexOf("dg")))));
	    		System.out.println("TurningNDegrees");
    		}
    		else if (task.contains("DC")) {
    			addSequential(new DriveToCurrent(Double.parseDouble(computedAuton.substring(0, task.indexOf("DC"))), 10));
	    		System.out.println("DrivingToCurrent");
    		}
    		else if (task.contains("dc")) {
    			addSequential(new DriveToCurrent(Double.parseDouble(computedAuton.substring(0, task.indexOf("dc"))), .5));
	    		System.out.println("LittleDrivingToCurrent");
    		}
    		else if (task.contains("cl")) {
    			//addSequential(clawthings);
    			System.out.println("DroppedCube");
    		}
    	}
    	System.out.println("end");
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	
 
    } 
}
